grepl("Scophthalmus aquosus", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Pseudopleuronectes americanus", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Sebastes fasciatus", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Hippoglossus hippoglossus", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Anarhichas lupus", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Zoarces", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Macrozoarces americanus", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("Merluccius bilinearis", Scientific.Name) ~ "Northeast Multispecies (NE)",
grepl("SKATE", NMFS.Name, ignore.case = TRUE) ~"Northeast Skate Complex (NE)",
grepl("Urophycis chuss", Scientific.Name, ignore.case = TRUE) ~"Small-Mesh Multispecies",
grepl("Merluccius albidus", Scientific.Name, ignore.case = TRUE) ~"Small-Mesh Multispecies",
grepl("Placopecten magellanicus", Scientific.Name, ignore.case = TRUE) ~"Atlantic Sea Scallop (NE)",
grepl("Lophius americanus", Scientific.Name, ignore.case = TRUE) ~"Monkfish (NE/MA)",
grepl("Chaceon quinquedens", Scientific.Name, ignore.case = TRUE) ~"Red Crab",
grepl("Clupea harengus", Scientific.Name, ignore.case = TRUE) ~"Atlantic Herring (NE)",
grepl("Squalus acanthias", Scientific.Name, ignore.case = TRUE) ~"Spiny Dogfish (NE/MA)",
grepl("Salmo salar", Scientific.Name, ignore.case = TRUE) ~"Atlantic Salmon")) %>%
mutate(Management.Group=replace_na(Management.Group, "Other")) %>%
mutate(NMFS.Namev2=recode(NMFS.Name, "SKATE, ROSETTE"='SKATE',
"SKATE, BARNDOOR"='SKATE',
"SKATE, CLEARNOSE"='SKATE',
"SKATE, THORNY"='SKATE',
"SKATE, SMOOTH"='SKATE',
"SKATE, WINTER"='SKATE',
"SKATE, LITTLE"='SKATE',
"SKATES, RAJIDAE (FAMILY) **"="SKATE",
"LITTLE/WINTER SKATE MIX **"="SKATE")) %>%
dplyr::rename(Taxonkey=Tsn) %>%
mutate_if(is.character,as.factor) #covert all character strings to factors
str(raw)
table(raw$Management.Group)
## 5. Filter to public data only
## 6. Remove seaweeds
## 7. Aggregate dataframe to ignore states (if wanted)
YrSps <- raw %>%
filter(Confidentiality=="Public") %>%
filter(!grepl("SEAWEED", NMFS.Name)) %>%
select(-c("State", "Source")) %>%
aggregate(cbind(Terminal.Yr.Dollars, Dollars, Metric.Tons, Pounds) ~ ., sum)
# DATA SELECTION ----
## Find top_n species by landings ----
## Aggregate dataframe to ignore year and rank the top species overall by landings
Top_n=30 # set your top n value
Top30_Landings<- YrSps %>%
group_by(NMFS.Name, Scientific.Name, NMFS.Namev2, Confidentiality, Management.Group, Collection) %>%
summarise_all(sum) %>%
as.data.frame(Top30_Landings) %>%
mutate(CatchRank=rank(-Metric.Tons)) %>%
slice_max(-CatchRank, n=Top_n, with_ties = TRUE)
Top30Sp<-factor(c(Top30_Landings$NMFS.Name)) # Extract names of top 30 species overall by landings
## Create a new dataframe with only the Top 30 by landings ----
## Create a scaled revenue vector
Top30<-YrSps %>%
filter(NMFS.Name %in% c(Top30Sp)) %>%
mutate(MgGp=as.numeric(Management.Group)) %>%
droplevels()
## 1. Timeseries gaps ----
#CHECK FOR GAPS IN TIMESERIES AND DECIDE WHAT TO DO WITH MISSING DATA
beforeTime<-ggplot(Top30 %>% filter(!Terminal.Yr.Dollars==0),
aes(fct_reorder(NMFS.Name, MgGp), y=Year, colour=Management.Group)) +
geom_point() +
ylab("Year") + xlab("Species/Spp. Aggregation") +
theme(axis.text.x = element_text(angle = 90, hjust=1, size=12),
legend.position = "right",
legend.title = element_text(size=15),
legend.text = element_text(size=15)) +
labs(colour="Fisheries\nManagement\nPlan")
beforeTime
## DATA DECISIONS ----
# 1. PORGIES** merged with SCUP
# 2. Aggregate all squids
# 3. Spiny dogfish were aggregated with the historic aggregation “SHARKS, DOGFISH **”. #Kick out smooth dogfish
#You will need these species too to deal with missing data in the Top30
ExtraSps<-factor(c("SHARKS, DOGFISH **", "SCUP"))
Top30Plus<-c(Top30Sp,ExtraSps)
Top30b<-YrSps %>%
filter(NMFS.Name %in% c(Top30Plus)) %>%
mutate(MgGp=as.numeric(Management.Group)) %>%
droplevels()
# Aggregate porgies and scup so there is one revenue and landings value per year
PORGS <- Top30b %>%
filter(NMFS.Name %in% c("SCUP", "PORGIES **")) %>%
aggregate(.~Year, FUN='sum') %>%
mutate(NMFS.Namev2="PORGIES_SCUP",
Taxonkey=as.numeric(00000),
NMFS.Name="PORGIES_SCUP",
Scientific.Name="PORGIES_SCUP",
Confidentiality="Public",
Collection="Commercial",
Management.Group="Other",
MgGp=5)
table(PORGS$Year) #check there is only one row per year
# Aggregate squids so there is one revenue and landings value per year
SQUIDS <- Top30b %>%
filter(grepl("SQUID", NMFS.Name)) %>%
aggregate(.~Year, FUN='sum') %>%
mutate(NMFS.Namev2="SQUIDS",
Taxonkey=as.numeric(8),
NMFS.Name="SQUIDS",
Scientific.Name="SQUIDS",
Confidentiality="Public",
Collection="Commercial",
Management.Group="Other",
MgGp=5)
table(SQUIDS$Year) #check there is only one row per year
# Aggregate dogfish so there is one revenue and landings value per year
DOGS <- Top30b %>%
filter(NMFS.Name %in% c("SHARK, DOGFISH, SPINY", "SHARKS, DOGFISH **")) %>%
aggregate(.~Year, FUN='sum') %>%
mutate(NMFS.Namev2="SPINY AGG",
Taxonkey=as.numeric(9),
NMFS.Name="SPINY AGG",
Scientific.Name="SPINY AGG",
Confidentiality="Public",
Collection="Commercial",
Management.Group="Other",
MgGp=8)
table(DOGS$Year) #check there is only one row per year
#Remove "SHARK, DOGFISH, SPINY", "PORGIES **" and all SQUID from dataframe and merge with new dataframes above
RmvSps<-as.factor(c("SHARK, DOGFISH, SPINY", "SHARKS, DOGFISH **",
"PORGIES **", "SCUP",
"SQUID, LONGFIN LOLIGO", "SQUIDS, LOLIGINIDAE **",
"SQUID, SHORTFIN ILLEX",
"WITHHELD FOR CONFIDENTIALITY",
"VERTEBRATES, JAWED",
"SHRIMPS, PENAEOID **"))
df1<-Top30b %>%
filter(!NMFS.Name %in% c(RmvSps))
P_Selection<-rbind(df1,SQUIDS, DOGS, PORGS) %>%
mutate(Scaled.Value=Terminal.Yr.Dollars/max(Terminal.Yr.Dollars))
# Set scaling factor ----
range(P_Selection$Scaled.Value)
SCALING_F<-max(P_Selection$Terminal.Yr.Dollars) #Save your scaling factor to easily re-scale values back to original
SCALING_F
# PLOTS ----
## Time series plots ----
## See "Timeseries plots.R" script for combined before/after manuscript plot
beforeTime
afterTime<-ggplot(P_Selection, aes(fct_reorder(NMFS.Name, MgGp), y=Year, colour=Management.Group)) +
geom_point() +
ylab("Year") + xlab("Species/Spp. Aggregation") +
theme(axis.text.x = element_text(angle = 90, hjust=1, size=12),
legend.position = "right",
legend.title = element_text(size=15),
legend.text = element_text(size=15)) +
labs(colour="Fisheries\nManagement\nPlan")
afterTime
##Landings Plot ----
ggplot(P_Selection,
aes(fill=reorder(NMFS.Name, +Metric.Tons), y=Metric.Tons/10e4, x=Year)) +
geom_bar(position='stack', stat='identity') +
scale_fill_manual(values = c("ALEWIFE"="#7FC97F",
"CLAM, QUAHOG, OCEAN"="#BEAED4",
"CLAM, SOFT"="#FDC086",
"CLAM, SURF, ATLANTIC"="#7570B3",
"COD, ATLANTIC"="#386CB0",
"FLOUNDER, AMERICAN PLAICE"="#213D4A",
"FLOUNDER, WINTER"="#BF5B17",
"FLOUNDER, WITCH"="#666666",
"FLOUNDER, YELLOWTAIL"="#1B9E77",
"GOOSEFISH"="#D95F02",
"HADDOCK"="#F5A90D",
"HAKE, SILVER"="#521F2F",
"HAKE, WHITE"="#CB0189",
"HERRING, ATLANTIC"="#FB9A99",
"LOBSTER, AMERICAN"="#054BAB",
"MACKEREL, ATLANTIC"="#F76334",
"MENHADENS **"="#4F3F21",
"POLLOCK"="#D27DE8",
"REDFISH, ACADIAN"="#F0027F",
"SCALLOP, SEA"="#66087B",
"SKATE"="#4CFA1A",
"URCHINS, SEA, STRONGYLOCENTROTUS (GENUS) **"="#84AD0E",
"SQUIDS"="#66A61E",
"SPINY AGG"="#16C8D2",
"PORGIES_SCUP"="yellow")) +
theme(legend.key.size = unit(3, 'mm'),
legend.text = element_text(size = 10),
legend.title = element_blank(),
legend.position = "top",
axis.text.x = element_text(angle = 0, vjust = 0.7, size=20),) +
labs(x="Year", y=expression('Landings (Metric Tons x10'^4*')')) +
guides(fill=guide_legend(ncol=4))
## Revenue plot ----
range(P_Selection$Terminal.Yr.Dollars)
OM<-1.0e8 #set correct order of magnitude for revenue
ggplot(P_Selection,
aes(fill=reorder(NMFS.Name, +Metric.Tons), y=(Terminal.Yr.Dollars)/OM, x=Year)) +
geom_bar(position='stack', stat='identity') +
scale_fill_manual(values = c("ALEWIFE"="#7FC97F",
"CLAM, QUAHOG, OCEAN"="#BEAED4",
"CLAM, SOFT"="#FDC086",
"CLAM, SURF, ATLANTIC"="#7570B3",
"COD, ATLANTIC"="#386CB0",
"FLOUNDER, AMERICAN PLAICE"="#213D4A",
"FLOUNDER, WINTER"="#BF5B17",
"FLOUNDER, WITCH"="#666666",
"FLOUNDER, YELLOWTAIL"="#1B9E77",
"GOOSEFISH"="#D95F02",
"HADDOCK"="#F5A90D",
"HAKE, SILVER"="#521F2F",
"HAKE, WHITE"="#CB0189",
"HERRING, ATLANTIC"="#FB9A99",
"LOBSTER, AMERICAN"="#054BAB",
"MACKEREL, ATLANTIC"="#F76334",
"MENHADENS **"="#4F3F21",
"POLLOCK"="#D27DE8",
"REDFISH, ACADIAN"="#F0027F",
"SCALLOP, SEA"="#66087B",
"SKATE"="#4CFA1A",
"URCHINS, SEA, STRONGYLOCENTROTUS (GENUS) **"="#84AD0E",
"SQUIDS"="#66A61E",
"SPINY AGG"="#16C8D2",
"PORGIES_SCUP"="yellow")) +
theme(legend.key.size = unit(3, 'mm'),
legend.text = element_text(size = 10),
legend.title = element_blank(),
legend.position = "top",
axis.text.x = element_text(angle = 0, vjust = 0.7, size=20),) +
labs(x="Year", y=expression('Revenue (Hundred Million $)')) + #Set label axis accordingly
guides(fill=guide_legend(ncol=4))
LB_SUM<-aggregate(cbind(Metric.Tons, Terminal.Yr.Dollars)~Year, P_Selection, sum) %>%
dplyr::rename(SumCT=Metric.Tons,
SumVAL=Terminal.Yr.Dollars)
data<-merge(P_Selection, LB_SUM, by=c("Year")) %>%
mutate(Price=Terminal.Yr.Dollars/Metric.Tons,
MgGp=as.numeric(Management.Group)) %>%
mutate(IYear=Year, #Naming for the function
Catch=Metric.Tons,
Value=Scaled.Value)
## Correlation matrix ----
# CHECK THERE IS A GOOD MIX OF COVARIANCE/CORRELATION IN YOUR SELECTED PORTFOLIO
ALL_YEAR <- unique(data$Year)
ALL_TAXA <- unique(data$NMFS.Namev2)
ALL_COMB <- expand.grid(ALL_YEAR,ALL_TAXA) %>%
dplyr::rename(Year=Var1,
NMFS.Namev2=Var2)
d_2 <- merge(data, ALL_COMB, all=TRUE,by=c('Year','NMFS.Namev2')) %>%
dplyr::mutate(Terminal.Yr.Dollars = replace_na(Terminal.Yr.Dollars, 0),
Metric.Tons = replace_na(Metric.Tons, 0),
Price = replace_na(Terminal.Yr.Dollars/Metric.Tons,0))
dataCOR<- d_2 %>%
select(NMFS.Namev2, Year, Terminal.Yr.Dollars) %>%
pivot_wider(names_from = NMFS.Namev2, values_from = Terminal.Yr.Dollars) %>%
tibble::column_to_rownames('Year')
dataCOR=cor(dataCOR)
corrplot(dataCOR, method = 'square', order = 'AOE', type = 'lower', diag = FALSE)
dev.off()
## Combined Revenue timeseries ----
ggplot(data) +
geom_point(aes(x=Year, y=(SumVAL)/OM)) +
labs(y ="Revenue (Hundred Million Dollars)", x="Year")
ggplot(data) +
geom_line(aes(x=Year, y=Terminal.Yr.Dollars/OM, colour=NMFS.Namev2), linewidth=1.5) +
scale_color_manual(values = c("ALEWIFE"="#7FC97F",
"CLAM, QUAHOG, OCEAN"="#BEAED4",
"CLAM, SOFT"="#FDC086",
"CLAM, SURF, ATLANTIC"="#7570B3",
"COD, ATLANTIC"="#386CB0",
"FLOUNDER, AMERICAN PLAICE"="#213D4A",
"FLOUNDER, WINTER"="#BF5B17",
"FLOUNDER, WITCH"="#666666",
"FLOUNDER, YELLOWTAIL"="#1B9E77",
"GOOSEFISH"="#D95F02",
"HADDOCK"="#F5A90D",
"HAKE, SILVER"="#521F2F",
"HAKE, WHITE"="#CB0189",
"HERRING, ATLANTIC"="#FB9A99",
"LOBSTER, AMERICAN"="#054BAB",
"MACKEREL, ATLANTIC"="#F76334",
"MENHADENS **"="#4F3F21",
"POLLOCK"="#D27DE8",
"REDFISH, ACADIAN"="#F0027F",
"SCALLOP, SEA"="#66087B",
"SKATE"="#4CFA1A",
"URCHINS, SEA, STRONGYLOCENTROTUS (GENUS) **"="#84AD0E",
"SQUIDS"="#66A61E",
"SPINY AGG"="#16C8D2",
"PORGIES_SCUP"="yellow")) +
labs(y ="Revenue (Hundred Million Dollars)", x="Year") +
theme(legend.text=element_text(size=8), legend.title = element_blank())
ggplot(data) +
geom_line(aes(x=Year, y=log(Terminal.Yr.Dollars/OM), colour=NMFS.Namev2), linewidth=2) +
scale_color_manual(values = c("ALEWIFE"="#7FC97F",
"CLAM, QUAHOG, OCEAN"="#BEAED4",
"CLAM, SOFT"="#FDC086",
"CLAM, SURF, ATLANTIC"="#7570B3",
"COD, ATLANTIC"="#386CB0",
"FLOUNDER, AMERICAN PLAICE"="#213D4A",
"FLOUNDER, WINTER"="#BF5B17",
"FLOUNDER, WITCH"="#666666",
"FLOUNDER, YELLOWTAIL"="#1B9E77",
"GOOSEFISH"="#D95F02",
"HADDOCK"="#F5A90D",
"HAKE, SILVER"="#521F2F",
"HAKE, WHITE"="#CB0189",
"HERRING, ATLANTIC"="#FB9A99",
"LOBSTER, AMERICAN"="#054BAB",
"MACKEREL, ATLANTIC"="#F76334",
"MENHADENS **"="#4F3F21",
"POLLOCK"="#D27DE8",
"REDFISH, ACADIAN"="#F0027F",
"SCALLOP, SEA"="#66087B",
"SKATE"="#4CFA1A",
"URCHINS, SEA, STRONGYLOCENTROTUS (GENUS) **"="#84AD0E",
"SQUIDS"="#66A61E",
"SPINY AGG"="#16C8D2",
"PORGIES_SCUP"="yellow")) +
labs(y ="log(Revenue (Hundred Million Dollars))",x="Year") +
theme(legend.text=element_text(size=8), legend.title = element_blank())
portfolio_risk <- function(data,YEAR,YEARS,TAXA,N,j,EBFM) {
d_2 <- data %>%
filter(IYear %in% c(YEARS)) %>%
aggregate(cbind(Value,Catch)~IYear+Taxonkey, FUN='sum') %>%
arrange(IYear, Taxonkey, Value, Catch)
ALL_YEAR <- unique(d_2$IYear)
ALL_TAXA <- unique(d_2$Taxonkey)
ALL_COMB <- expand.grid(ALL_YEAR,ALL_TAXA) %>%
dplyr::rename(IYear=Var1,
Taxonkey=Var2)
d_2 <- merge(d_2,ALL_COMB, all=TRUE,by=c('IYear','Taxonkey')) %>%
dplyr::mutate(Value = replace_na(Value, 0),
Catch = replace_na(Catch, 0),
Price = replace_na(Value/Catch,0))
# Set Lambda & Gamma ----
P_LAMBDA <- 1 #each period receives equal weight
# P_LAMBDA <- 0.549 #decay factor. 5% left after 5 years. If this is 1, each year is given equal weight.
# P_LAMBDA <- 0.741 # 5% left after 10 years.
P_GAMMA <- 1 #sustainability parameter
S_I <- 0.5
z = length(unique(d_2$Taxonkey))
#Adding the decay factor into the covariance matrix (Eqn. 2)
d_2 <- d_2 %>%
mutate(WCatch = P_LAMBDA^(YEAR-IYear+1)*Catch,
WAvgVal = WCatch*Price, # Eqn. 5. Value used to estimate omega. Omega= weighted average of catches over time with decay
Lambda = P_LAMBDA^(YEAR-IYear+1),  #this is the decay value applied to each year.
WPrice = Lambda*Price,
WVal = Lambda*Value)
d_3<- d_2%>%
filter(IYear == YEAR)%>%
mutate(tValue = Value,
tYear = YEAR)%>%
select(Taxonkey,tValue, tYear)
WAVG_CATCH <- aggregate(cbind(Value,WCatch,Lambda,WAvgVal,WPrice,WVal)~Taxonkey,data=d_2,FUN='sum') %>%
mutate(WCatch = WCatch/Lambda,
Omega = WAvgVal/WPrice, #Eqn. 5. average biomass. Omega= weighted average of catches over time with decay.
WVal = WVal/Lambda)
MAX_CATCH <- aggregate(Catch~Taxonkey,data=d_2,FUN='max') %>%
mutate(MaxCatch = Catch*P_GAMMA) %>% # Numerator of Eqn. 4 in Jin et al. i.e., max sustainable catch for each species at time t * sustainability parameter
select(Taxonkey,MaxCatch)
WAVG_CATCH <- merge(d_3,WAVG_CATCH,by='Taxonkey')
WAVG_CATCH <- merge(MAX_CATCH,WAVG_CATCH,by='Taxonkey')  %>%
mutate(MaxWeight = MaxCatch/Omega, #Eqn. 4 of Jin. et al. maximum weight = maximum biomass/average biomass)
Year = YEAR,
TImpweight = tValue/WVal, #implicit weight from actual return.
WRatio = TImpweight/MaxWeight, #ratio of implicit to max weight
Chk = pmin(TImpweight,MaxWeight),
CReturn = pmin(TImpweight,MaxWeight)*WVal)
DIFF_RETURNS <-cbind(sum(WAVG_CATCH$CReturn[which(WAVG_CATCH$Year==YEAR)]), sum(WAVG_CATCH$Value[which(WAVG_CATCH$Year==YEAR)]))
#Var-Covar. Estimating weighted Variance-Covariance matrix ----
VAR_DATA <- merge(d_2,WAVG_CATCH, by='Taxonkey') %>%
select('Taxonkey','IYear','Lambda.x','Value.x','WVal.y') %>%
dplyr::rename(Year=IYear,
Lambda=Lambda.x,
Value=Value.x,
WVal=WVal.y) %>%
mutate(Value = Value-WVal) %>%
select(!WVal)
VAR_DATA1 <- subset(VAR_DATA, select=c('Taxonkey','Year','Value')) %>%
cast(Taxonkey~Year)
VAR_DATA <- VAR_DATA %>%
mutate(Value = Value*Lambda) %>%
select(!Lambda) %>%
cast(Taxonkey~Year)
VAR_names <- VAR_DATA$Taxonkey
VAR_DATA <- matrix(unlist(subset(VAR_DATA, select=-Taxonkey)),nrow=z, ncol=j) #z=number of spp. in portfolio, j=years in portfolio
VAR_DATA1 <- matrix(unlist(subset(VAR_DATA1, select=-Taxonkey)),nrow=z, ncol=j)
VAR_COVAR <- VAR_DATA%*%t(VAR_DATA1)
VAR_COVAR <- VAR_COVAR/WAVG_CATCH$Lambda
pmean <- function(x,y) (x+y)/2
VAR_COVAR <- pmean(VAR_COVAR,matrix(VAR_COVAR,nrow(VAR_COVAR),byrow=TRUE)) ##???? maybe a rounding issue
VAR_COVAR_SS <- diag(diag(VAR_COVAR[])) # puts the vector above into a diagonal matrix for use in optimizing based on single species assumptions
MEAN_RETURNS <- matrix(WAVG_CATCH$WVal)
# Targets ----
# Create the targets being fed through the optimizer
TOT_REVENUE <- aggregate(cbind(Value)~IYear, data=d_2, FUN='sum')
HALF_MAX_REV <- max(TOT_REVENUE$Value)*0.5 #used in optimal weights figure. The revenue weight share = weight (wi,t)/maximum weight (Wi,t) for each species group i, calculated at expected return = half of the maximum return.
TARGET_RETURNS <- quantile(TOT_REVENUE$Value, seq(.00,1,by=.05))
filler<-seq(0.01, c(min(TARGET_RETURNS)), by = 0.1)
LastYearRevenue <- TOT_REVENUE %>%
filter(IYear == YEAR)
LastYearRevenue <- LastYearRevenue[,2]
TARGET_RETURNS<-as.numeric(c(filler, HALF_MAX_REV, TARGET_RETURNS, LastYearRevenue))
MAX_WEIGHTS <- matrix(WAVG_CATCH$MaxWeight,nrow=z)
MIN_WEIGHTS <- matrix(0.00,nrow=z)
OPTIMAL_WEIGHTS <- NULL
OPTIMAL_REVENUE <- NULL
OPTIMAL_LANDINGS <- NULL
OPTIMAL_VAR <- NULL
# Optimiser----
# TARGET=HALF_MAX_REV if you want to run a line with a single target
for (TARGET in TARGET_RETURNS)  tryCatch({
{
if(EBFM == TRUE){
SOLUTION <- tryCatch(ipop(-MEAN_RETURNS,VAR_COVAR,t(-MEAN_RETURNS),-TARGET,
MIN_WEIGHTS, MAX_WEIGHTS, TARGET, margin=10^-6, sig=7,
verb=FALSE)) #verb=TRUE gives more info for computational singularity issue
} else {
SOLUTION <- tryCatch(ipop(-MEAN_RETURNS,VAR_COVAR_SS,t(-MEAN_RETURNS),-TARGET,
MIN_WEIGHTS, MAX_WEIGHTS, TARGET, margin=10^-6, sig=7,
verb=FALSE))
}
}
#Pulling the optimum weights from the solution
TEMP_WEIGHTS <- matrix(SOLUTION@primal)
colnames(TEMP_WEIGHTS) <- paste("Optimal_weights")
#Calculating optimal revenue, by stock complex
TEMP_REVENUE <- MEAN_RETURNS*TEMP_WEIGHTS
colnames(TEMP_REVENUE) <- paste("Optimized_Revenue_",TARGET)
#Calculate optimal landings, by stock complex
TEMP_LANDINGS <- WAVG_CATCH$WCatch*TEMP_WEIGHTS
colnames(TEMP_LANDINGS) <- paste("Optimized_Landings_",TARGET)
#Calculate the realized variance for each optimization solution
###!!!! use full COV matirx here
TEMP_VAR<-t(TEMP_WEIGHTS)%*%VAR_COVAR%*%TEMP_WEIGHTS
rownames(TEMP_VAR)<- paste("Optimized_Variance_",TARGET)
TEMP_VAR<-cbind(TEMP_VAR, TARGET)
# Accumulating the results for each optimization solution
TEMP_WEIGHTS <- as.data.frame(cbind(TEMP_WEIGHTS, TARGET, VAR_names, WAVG_CATCH$MaxWeight))
colnames(TEMP_WEIGHTS) <- c('Optimal_weights', "TARGET", "Taxonkey", "MaxWeight")
OPTIMAL_WEIGHTS <- rbind(TEMP_WEIGHTS, OPTIMAL_WEIGHTS) #by taxonkey
OPTIMAL_REVENUE <- cbind(OPTIMAL_REVENUE,TEMP_REVENUE) #by taxonkey
OPTIMAL_LANDINGS <- cbind(OPTIMAL_LANDINGS, TEMP_LANDINGS) #by taxonkey
OPTIMAL_VAR <- rbind(OPTIMAL_VAR,TEMP_VAR) #one value, variance for the associated target value
print(TARGET) # check on progress of quadratic programming optimizer
},error = function(e){})
#rownames(OPTIMAL_WEIGHTS) <- colnames(REVENUE[,1:stockNum])
sum(OPTIMAL_WEIGHTS)
#rownames(OPTIMAL_LANDINGS) <- colnames(REVENUE[,1:stockNum])
#rownames(OPTIMAL_REVENUE) <- colnames(REVENUE[,1:stockNum])
#colnames(OPTIMAL_VAR) <- "Optimized_Variance"
MEAN_VAR <- cbind(OPTIMAL_VAR,colSums(OPTIMAL_REVENUE))
colnames(MEAN_VAR) <- c("OptimizedVariance","TARGET", 'OptimizedRevenue')
MEAN_VAR <- as.data.frame(MEAN_VAR)
# MEAN_VAR$OptimizedRevenue <- MEAN_VAR$OptimizedRevenue
MEAN_VAR$OptimizedStDev <- sqrt(MEAN_VAR$OptimizedVariance)
T_IMPLICIT_WEIGHTS = cbind(WAVG_CATCH$Taxonkey, WAVG_CATCH$TImpweight, WAVG_CATCH$MaxWeight, WAVG_CATCH$WVal)
colnames(T_IMPLICIT_WEIGHTS) <- c( 'Taxonkey',"TImpWeight","MaxWeight", "WVal")
AP_T<-matrix(t(WAVG_CATCH$TImpweight)%*%VAR_COVAR%*%WAVG_CATCH$TImpweight)
colnames(AP_T) <- 'ActualP_T'
AP_T<-as.data.frame(cbind(AP_T, LastYearRevenue, YEAR)) #you need to sqrt the AP to get SD
# This should just be MEAN_VAR FOR THE TERMINAL YEAR
FP<-MEAN_VAR %>%
filter(TARGET==LastYearRevenue)
colnames(FP) <- c('FrontierP', "TARGET", "OptimizedRevenue", "OptimizedStDev") ##you need to sqrt the FrontierP to get SD
############### List of data frames ############
optimums <- list ("MEAN_VAR"=MEAN_VAR,"TAXON_OPTIMAL_WEIGHTS" =OPTIMAL_WEIGHTS, "COVARIANCE" =VAR_COVAR,
"T_IMPLICIT_WEIGHTS" = T_IMPLICIT_WEIGHTS,
"ACTUAL_PORTFOLIO_T"= AP_T,"FRONTIER_PORTFOLIO"=FP,
"HALF_MAX_REV" = HALF_MAX_REV,
"OPTIMAL_REVENUE" = OPTIMAL_REVENUE, "OPTIMAL_LANDINGS" = OPTIMAL_LANDINGS)
return(optimums)
}
#LOOP OVER THE FUNCTION ----
#Loop through the years so the frontier is going up until time t.
YEARS<-unique(data$IYear)
FrontierResults <-NULL
ImpResults <-NULL
Portfolio <-NULL
Taxon_Opt_Weight <- NULL
Half_Max_Rev <- NULL
for (k in YEARS) tryCatch({
yr = min(YEARS):k
N = as.numeric(length(yr))
j = N
LAST_YEAR = max(yr)
c<-portfolio_risk(data=data,YEAR=LAST_YEAR,YEARS=yr,TAXA=Taxonkey,N=N,j=j, EBFM = TRUE)
d<-portfolio_risk(data=data,YEAR=LAST_YEAR,YEARS=yr,TAXA=Taxonkey,N=N,j=j, EBFM = FALSE)
EBFM_EF_Risk <- c$MEAN_VAR
Type <- rep("EBFM",nrow(c$MEAN_VAR))
EBFM_EF_Risk <- cbind(Type, EBFM_EF_Risk)
SS_EF_Risk <- d$MEAN_VAR
Type <- rep("SS",nrow(d$MEAN_VAR))
SS_EF_Risk <- cbind(Type, SS_EF_Risk)
All_EF_Risk <- rbind(EBFM_EF_Risk, SS_EF_Risk)
# All_EF <- rbind(All_EF, SS_EF)
All_EF_Risk$Iteration<-LAST_YEAR #!!
Iteration<-LAST_YEAR
FrontierResults <- rbind(All_EF_Risk, FrontierResults)
TImpWeights <- c$T_IMPLICIT_WEIGHTS
Iteration<-LAST_YEAR
ImpWeights <- cbind(Iteration, TImpWeights)
ImpWeights<-as.data.frame(ImpWeights) #implicit weights for the terminal year
denom<-t(ImpWeights$TImpWeight)%*%ImpWeights$WVal #(denominator in Eqn. 6)
ImpResults <- rbind(ImpWeights, ImpResults)
ImpResults <-as.data.frame(ImpResults)
Front_Portfolio<- c$FRONTIER_PORTFOLIO
Act_Portfolio_T <-c$ACTUAL_PORTFOLIO_T
AF<-cbind(Iteration, Act_Portfolio_T, Front_Portfolio)
AF<-cbind(AF,denom = denom)
Portfolio<-rbind(AF, Portfolio)
# Create a dataframe which pulls the optimal weights for each taxon key, for each target revenue run, for each year
alex <- c$TAXON_OPTIMAL_WEIGHTS
alex$Iteration<-LAST_YEAR
Taxon_Opt_Weight <- rbind(Taxon_Opt_Weight, alex)
# Taxon_Opt_Weight<-as.data.frame(Taxon_Opt_Weight)
#Create a dataframe which shows half of the maximum revenue up until time t
HalfMaxRev <- c$HALF_MAX_REV
HalfMaxRev <- cbind(HalfMaxRev, Iteration)
Half_Max_Rev <- as.data.frame(rbind(Half_Max_Rev, HalfMaxRev))
print(Iteration)
}, error = function(e){}) #if this doesn't spit out any results try toggling dplyr off and on again. Re-try.
